options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: rpi_noise
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 28.0]
    rotation: 0
    state: enabled

blocks:
- name: f
  id: variable
  parameters:
    comment: ''
    value: 86.6e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 188.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '200000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 28.0]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 132.0]
    rotation: 0
    state: true
- name: epy_module_0
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\nimport\
      \ socket\nimport string\nimport sys\n\ndef jmf_server(tt):\n\twhile True:\n\t\
      \tsock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\t\tsock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)\n\
      \t\tsock.bind(('192.168.1.168',4242))\n\t\tprint(\"Waiting for connection\"\
      )\n\t\tsock.listen(1)\n\t\tconn,addr=sock.accept()\n\t\twith conn:\n\t\t\tprint(\"\
      connected from: \",addr)\n\t\t\twhile True:\n\t\t\t\tdata=conn.recv(1)\n\t\t\
      \t\tif data:\n\t\t\t\t\tdata=data.decode()\n\t\t\t\t\tprint(data)\n\t\t\t\t\t\
      if '+' in data:\n\t\t\t\t\t\ttt.f=tt.f+1e4\n\t\t\t\t\tif '-' in data:\n\t\t\t\
      \t\t\ttt.f=tt.f-1e4\n\t\t\t\t\ttt.set_f(tt.f)\n\t\t\t\t\tif 'q' in data:\n\t\
      \t\t\t\t\tsock.shutdown(socket.SHUT_RDWR)\n\t\t\t\t\t\tsock.close()\n\t\t\t\t\
      \t\tbreak\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 28.0]
    rotation: 0
    state: true
- name: rpitx_rpitx_sink_0
  id: rpitx_rpitx_sink
  parameters:
    affinity: ''
    alias: ''
    carrier_freq: f
    comment: ''
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 140.0]
    rotation: 0
    state: true
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: 'print("Starting server")

      import threading

      threading.Thread(target=epy_module_0.jmf_server,args=(self,)).start()'
    comment: ''
    priority: ''
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 28.0]
    rotation: 0
    state: true

connections:
- [analog_noise_source_x_0, '0', rpitx_rpitx_sink_0, '0']

metadata:
  file_format: 1
